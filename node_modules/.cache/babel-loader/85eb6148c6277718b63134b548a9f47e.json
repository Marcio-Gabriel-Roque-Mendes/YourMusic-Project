{"ast":null,"code":"var _jsxFileName = \"/home/marcio/Documentos/Projetos/TodosProjetos/Portfolio/Project YourMusic/src/pages/Album.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MusicCard from './MusicCard';\nimport Header from '../components/Header';\nimport getMusics from '../services/musicsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Album extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      pegaMusicas: {},\n      musicaPorId: [],\n      artistName: '',\n      collectionName: '',\n      artworkUrl100: ''\n    };\n\n    this.updateState = requestedSongs => {\n      this.setState({\n        artistName: requestedSongs[0].artistName,\n        collectionName: requestedSongs[0].collectionName,\n        artworkUrl100: requestedSongs[1].artworkUrl100\n      });\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      match\n    } = this.props;\n    const {\n      params\n    } = match;\n    const {\n      id\n    } = params;\n    const pegaMusicas = await getMusics(id);\n    this.setState({\n      pegaMusicas: pegaMusicas[0],\n      musicaPorId: pegaMusicas.filter(songTrackId => songTrackId.trackId)\n    });\n  }\n\n  render() {\n    const {\n      pegaMusicas,\n      musicaPorId,\n      artistName,\n      collectionName,\n      artworkUrl100\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"albumInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"album cover\",\n          src: artworkUrl100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: `${collectionName}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `By ${artistName}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"page-album\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          \"data-testid\": \"artist-name\",\n          children: [' ', pegaMusicas.artistName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          \"data-testid\": \"album-name\",\n          children: [' ', pegaMusicas.collectionName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), musicaPorId.map(cadaMusica => /*#__PURE__*/_jsxDEV(MusicCard, {\n          previewUrl: cadaMusica.previewUrl,\n          trackName: cadaMusica.trackName,\n          trackId: cadaMusica.trackId\n        }, cadaMusica.trackName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    })\n  }).isRequired\n};\nexport default Album;","map":{"version":3,"sources":["/home/marcio/Documentos/Projetos/TodosProjetos/Portfolio/Project YourMusic/src/pages/Album.jsx"],"names":["React","Component","PropTypes","MusicCard","Header","getMusics","Album","state","pegaMusicas","musicaPorId","artistName","collectionName","artworkUrl100","updateState","requestedSongs","setState","componentDidMount","match","props","params","id","filter","songTrackId","trackId","render","map","cadaMusica","previewUrl","trackName","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MusicCard from './MusicCard';\nimport Header from '../components/Header';\nimport getMusics from '../services/musicsAPI';\n\nclass Album extends Component {\n  state = {\n    pegaMusicas: {},\n    musicaPorId: [],\n    artistName: '',\n    collectionName: '',\n    artworkUrl100: '',\n  }\n\n  async componentDidMount() {\n    const { match } = this.props;\n    const { params } = match;\n    const { id } = params;\n    const pegaMusicas = await getMusics(id);\n    this.setState({\n      pegaMusicas: pegaMusicas[0],\n      musicaPorId: pegaMusicas.filter((songTrackId) => songTrackId.trackId),\n    });\n  }\n\n  updateState = (requestedSongs) => {\n    this.setState({ artistName: requestedSongs[0].artistName,\n      collectionName: requestedSongs[0].collectionName,\n      artworkUrl100: requestedSongs[1].artworkUrl100 });\n  }\n  \n  render() {\n    const { pegaMusicas, musicaPorId, artistName,\n    collectionName, artworkUrl100 } = this.state;\n    return (\n      <section>\n        <div className=\"albumInfo\">\n            <img alt=\"album cover\" src={ artworkUrl100 } />\n            <h3 >{`${collectionName}`}</h3>\n            <p>{`By ${artistName}`}</p>\n        </div>\n        <div data-testid=\"page-album\">\n          <Header />\n          <p data-testid=\"artist-name\">\n            {' '}\n            {pegaMusicas.artistName}\n          </p>\n          <p data-testid=\"album-name\">\n            {' '}\n            {pegaMusicas.collectionName}\n          </p>\n          {musicaPorId.map((cadaMusica) => (\n            <MusicCard\n              key={ cadaMusica.trackName }\n              previewUrl={ cadaMusica.previewUrl }\n              trackName={ cadaMusica.trackName }\n              trackId={ cadaMusica.trackId }\n            />\n          ))}\n        </div>\n      </section>\n    );\n  }\n}\nAlbum.propTypes = {\n  match: PropTypes.shape({ params: PropTypes\n    .shape({ id: PropTypes.string }) }).isRequired,\n};\nexport default Album;\n"]},"metadata":{},"sourceType":"module"}