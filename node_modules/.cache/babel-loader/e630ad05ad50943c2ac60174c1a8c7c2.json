{"ast":null,"code":"var _jsxFileName = \"/home/marcio/Documentos/Projetos/TodosProjetos/Portfolio/Project YourMusic/src/pages/Album.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MusicCard from './MusicCard';\nimport Header from '../components/Header';\nimport getMusics from '../services/musicsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Album extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      pegaMusicas: {},\n      musicaPorId: [],\n      artistName: '',\n      collectionName: '',\n      artworkUrl100: ''\n    };\n\n    this.updateState = musicasRequisitadas => {\n      this.setState({\n        artistName: musicasRequisitadas[0].artistName,\n        collectionName: musicasRequisitadas[0].collectionName,\n        artworkUrl100: musicasRequisitadas[1].artworkUrl100\n      });\n    };\n\n    this.getListOfSongs = async () => {\n      const {\n        match: {\n          params: {\n            id\n          }\n        }\n      } = this.props;\n      const pegaMusicas = await getMusics(id);\n      this.setState({\n        listaDeMusicas: pegaMusicas\n      }, () => this.updateState(pegaMusicas));\n    };\n\n    this.updateState = requestedSongs => {\n      this.setState({\n        artistName: requestedSongs[0].artistName,\n        collectionName: requestedSongs[0].collectionName,\n        artworkUrl100: requestedSongs[1].artworkUrl100\n      });\n    };\n  }\n\n  // async componentDidMount() {\n  //   const { match } = this.props;\n  //   const { params } = match;\n  //   const { id } = params;\n  //   const pegaMusicas = await getMusics(id);\n  //   this.setState({\n  //     pegaMusicas: pegaMusicas[0],\n  //     musicaPorId: pegaMusicas.filter((songTrackId) => songTrackId.trackId),\n  //   });\n  // }\n  componentDidMount() {\n    this.getListOfSongs();\n  }\n\n  render() {\n    const {\n      pegaMusicas,\n      musicaPorId,\n      artistName,\n      collectionName,\n      artworkUrl100\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"albumInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"album cover\",\n          src: artworkUrl100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: `${collectionName}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `By ${artistName}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"page-album\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          \"data-testid\": \"artist-name\",\n          children: [' ', pegaMusicas.artistName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          \"data-testid\": \"album-name\",\n          children: [' ', pegaMusicas.collectionName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), musicaPorId.map(cadaMusica => /*#__PURE__*/_jsxDEV(MusicCard, {\n          previewUrl: cadaMusica.previewUrl,\n          trackName: cadaMusica.trackName,\n          trackId: cadaMusica.trackId\n        }, cadaMusica.trackName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    })\n  }).isRequired\n};\nexport default Album;","map":{"version":3,"sources":["/home/marcio/Documentos/Projetos/TodosProjetos/Portfolio/Project YourMusic/src/pages/Album.jsx"],"names":["React","Component","PropTypes","MusicCard","Header","getMusics","Album","state","pegaMusicas","musicaPorId","artistName","collectionName","artworkUrl100","updateState","musicasRequisitadas","setState","getListOfSongs","match","params","id","props","listaDeMusicas","requestedSongs","componentDidMount","render","map","cadaMusica","previewUrl","trackName","trackId","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MusicCard from './MusicCard';\nimport Header from '../components/Header';\nimport getMusics from '../services/musicsAPI';\n\nclass Album extends Component {\n  state = {\n    pegaMusicas: {},\n    musicaPorId: [],\n    artistName: '',\n    collectionName: '',\n    artworkUrl100: '',\n  }\n\n  // async componentDidMount() {\n  //   const { match } = this.props;\n  //   const { params } = match;\n  //   const { id } = params;\n  //   const pegaMusicas = await getMusics(id);\n  //   this.setState({\n  //     pegaMusicas: pegaMusicas[0],\n  //     musicaPorId: pegaMusicas.filter((songTrackId) => songTrackId.trackId),\n  //   });\n  // }\n\n  componentDidMount() {\n    this.getListOfSongs();\n  }\n\n  updateState = (musicasRequisitadas) => {\n    this.setState({ artistName: musicasRequisitadas[0].artistName,\n      collectionName: musicasRequisitadas[0].collectionName,\n      artworkUrl100: musicasRequisitadas[1].artworkUrl100 });\n  }\n\n  getListOfSongs = async () => {\n    const { match: { params: { id } } } = this.props;\n    const pegaMusicas = await getMusics(id);\n    this.setState({ listaDeMusicas: pegaMusicas },\n      () => this.updateState(pegaMusicas));\n  }\n\n  updateState = (requestedSongs) => {\n    this.setState({ artistName: requestedSongs[0].artistName,\n      collectionName: requestedSongs[0].collectionName,\n      artworkUrl100: requestedSongs[1].artworkUrl100 });\n  }\n\n  render() {\n    const { pegaMusicas, musicaPorId, artistName,\n    collectionName, artworkUrl100 } = this.state;\n    return (\n      <section>\n        <Header />\n        <div className=\"albumInfo\">\n            <img alt=\"album cover\" src={ artworkUrl100 } />\n            <h3 >{`${collectionName}`}</h3>\n            <p>{`By ${artistName}`}</p>\n        </div>\n        <div data-testid=\"page-album\">\n          <p data-testid=\"artist-name\">\n            {' '}\n            {pegaMusicas.artistName}\n          </p>\n          <p data-testid=\"album-name\">\n            {' '}\n            {pegaMusicas.collectionName}\n          </p>\n          {musicaPorId.map((cadaMusica) => (\n            <MusicCard\n              key={ cadaMusica.trackName }\n              previewUrl={ cadaMusica.previewUrl }\n              trackName={ cadaMusica.trackName }\n              trackId={ cadaMusica.trackId }\n            />\n          ))}\n        </div>\n      </section>\n    );\n  }\n}\nAlbum.propTypes = {\n  match: PropTypes.shape({ params: PropTypes\n    .shape({ id: PropTypes.string }) }).isRequired,\n};\nexport default Album;\n"]},"metadata":{},"sourceType":"module"}